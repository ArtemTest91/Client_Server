HW @ArtAnd91
Client_Server

1) Прочиать про клиент-серверную архитектуру.
	Клиент - то ПО которое установлено на машине пользователя.
	Сервер - компьютер, на котором хранится само приложение. Код, вся бизнес-логика и прочие доп.материалы.
	БД - хранилище данных.
	Клиент и сервер представляет собой некое программного обеспечение, в котором сетевая нагрузка распределена между поставщиками услуг (серверами) и заказчиками услуг (клиентами).
	Взаимодействие осуществляется посредством сетевого протокола (самый распространненый тип HTTP/HTTPS, о них будет рассказано ниже). Используется запросы (request) и ответы (response). Клиент серверная архитектура может быть двухуровневой, трехуровневой и многоуровневой. Двухуровневая, в ней учавствует только клиент и сервер. Трехуровневая, в ней добавляется сервер базы данных. Многоуровневая включает в себя множество участников (т.е. несколько серверов / несколько баз данных или все вместе).
	Примеры клиентов - браузер (если речь идет о web), office (если речь о десктопе).
	Виды клиентов:
	Тонкий клиент - программа, которая переносит большую часть задач по обработке информации на сервер (Например браузер, в котором открыто приложение, он-лайн игра);
	Толстый клиент - это такое приложение, которое обрабатывает всю основную логику самостоятельно, на локальной машине. На сервер могут передаваться только запросы к БД. (Например 1С бухгалтерия).
	Преимущества клиент серверной архитектуры - безопасность, отсутствует дублирование кода (т.е. разгружаются машины пользователей, снижая требования к ним).
	Недостатки - Высокая стоимость оборудования.
Если один из компонентов (сервер или БД) не работает, выходит из строя вся цепочка. В связи с этим, если приложение высоконагруженное (соц.сеть, банковское ПО) ставятся кластеры серверов и балансировщик, который определяет наименее загруженный сервер (или тот, что остался рабочим) и направляет на него запрос. 
	Различают две схемы:
- горячий резерв, о нем сказано выше (сервера или БД работают в параллель);
- холодный резерв (когда сервер или БД являются резервными, и подключается когда основной выходит из строя).
Это помогает устранить основной недостаток - когда упало одно звено и в итоге лежит вся система.
	

2) Что такое HTTP и HTTPS:
	HTTP и HTTPS - это протоколы передачи гипертекста. Протокол это набор правил передачи информации, т.е. он регламентирует по каким именно правилам информация будует передаваться по сети между двумя компьютерами (например клиент и сервер).
	Каждое такое сообщение может состоять из таких атрибутов как: стартовая строка, заголовки и тело. Обязательным является только стартовая строка, которая состоит в свою очередь из метода URI и версии протокола.
	HTTPS - поддерживает шифрование, т.е. имеет повышенный уровень безопасности обмена данными. В настоящее время является, по сути, стандартом для работы любого сайта.
	

3) HTTP методы:
	Метод HTTP запроса указывает серверу на то, какое действие мы хотим произвести с ресурсом.
	Основными HTTP методами являются являются:
- GET - получение ресурса;
- POST - создание ресурса (добавить, изменить, удалить);
- PUT - обновление ресурса (добавить, заменить);
- DELETE - удаление ресурса. 

Для примера:
GET /book/ — получить список всех книг;
GET /book/3/ — получить книгу номер 3;
PUT /book/ — добавить книгу (данные в теле запроса);
POST /book/3 – изменить книгу (данные в теле запроса);
DELETE /book/3 – удалить книгу;


4) HTTP статус коды сервера:
Ответы на команды клиента HTTP-сервера имеют кодировку. Различают 5 основных классов:
* 1.. - группа информационных кодов. Сообщает что задача состоит в создании сообщения о том, что текущий запрос принят;
*2.. - успешная обработка запроса. Запрос получен, обработан и выполнен без ошибок.
200 - запрос выполнен успешно;
*3.. - запрос перенаправлен, появляется в случае смены расположения нужного файла;
*4.. - ошибка на стороне пользователя. 
400 - запрос сформирован ненадлежащим образом (допущенная синтаксическая ошибка в теле запроса);
401 - несанкционированный запрос, клиенту необходимо отправить данные проверки подлинности;
403 - запрос не может быть обработанным из-за некоторых ограничений доступа к запрашиваемым данным;
404 - указанный в запросе ресурс не найден;
*5.. - ошибка на стороне сервера.
500 - внутренняя ошибка HTTP-сервера;
502 - полное отсутствие связи (неверная работа прокси-сервера);
503 - текущая недоступность сервера (сервер перегружен или находится на обслуживании)


5) Что такое ядро браузера 
Ядро браузера = движок браузера. 
Является программой, которая отвечает за получение содержимого веб-страниц (HTML, XML), обрабатывает CSS, т.е. организовывает информацию на странице и в итоге преобразует все это в привычную нам страницу на экране.
Движок JS - анализирует язык javascript и выполняет язык javascript для достижения
динамических эффектов веб-страницы.


6) Какие браузеры какиие ядра используют
Blink - движок Google Chrome (а также Opera и Microsoft Edge);
Gecko - движок Mozilla (Firefox);
WebKit - движок Apple Safari (является прототипом ядра Chrome);

7) Что такое API:
	API (программный интерфейс) - это набор функций, инструментов и правил с помощью которых одна программа взаимодействует с другой.
	API может быть разарботан по функционалу (например API для входа в систему, будет включать регистрацию и авторизацию, API для осуществления платежей и т.п.). 
	

8. Что такое ендпоинты
Это конечные точки в URL, куда направлен http запрос


9) URL (URI, URL, URN)
URL - это адрес сайта в сети интернет, определяющий его местонахождения;
URN - это набор символов, определяющих местонахождения какого то определенного ресурса (например страница конкретного товара в каталоге или сам католог в структуре всего сайта);
URI - это обобщенный идентификатор, может включать в себя как URL + URN так и каждую сущность по отдельности.


10) Идемпотентные HTTP методы:
	Идемпоненстоть - это свойство метода, при котором множественные идентичные запросы оказывают оказывают такое же влияние как одиночный такой запрос. Т.е. не должен иметь никаких побочных эффектов.
	К данному классу методов относят GET, PUT, POST и DELETE, при этом ответ сервера, в случае с DELETE после повторного запроса будет отличаться (при первом будет ответ 200 или 204 - элемент удален, при повторном 404 - не найден, однако состояние системы при этом не поменяется).

	Идемпотентный и небезопасный — значит, что, сколько бы не отправлялся, только первый изменит состояние системы, а остальные состояние системы не меняют.


11) Безопасные HTTP методы:
	Безопасными считаюся методы предназначенные только для получения информации и не изменяющие состояние сервера. к таким методам относят GET, HEAD.


12) Идентификация, Аутентификация, Авторизация:
	Идентификация — процедура, в результате выполнения которой для субъекта идентификации выявляется его идентификатор, однозначно определяющий этого субъекта в информационной системе.
	Для примера, пользователь хочет войти в акаунт Google - система запрашивает его логин, система его принимает как существующий - это идентификация
	
	Аутентификация — процедура проверки подлинности, например проверка подлинности пользователя путем сравнения введенного им пароля с паролем, сохраненным в базе данных.
	Для примера, после этого Google просит ввести пароль, пользователь его вводит, и система соглашается, что пользователь настоящий, раз пароль совпал — это аутентификация.

	Авторизация - предоставление определенному лицу или группе лиц прав на выполнение определенных действий.
	Для примера, после этого система предоставит пользователю право читать письма в его почтовом ящике и все в таком духе — это авторизация.


13) Что такое IP:
	IP-адрес – это уникальный адрес, идентифицирующий устройство в интернете или локальной сети. Представляет собой набор из четырех чисел, например, 192.158.1.38. Каждое число в этом наборе принадлежит интервалу от 0 до 255. Таким образом, полный диапазон IP-адресации – это адреса от 0.0.0.0 до 255.255.255.255.
	IP бывают статические - т.е. неизменные, динамические - меняются автоматически и регулярно. Интернет - провайдеры покупают большой пул IP-адресов и автоматически присваивают их своим клиентам. 


14) Что такое октеты в DNS:
	DNS (система доменных имен) преобразует доменные имена, удобные для человеческого восприятия (например, www.amazon.com), в IP-адреса, понимаемые машиной (например, 192.0.2.44).
	IP-адрес состоит из четырех частей, записанных в виде десятичных чисел с точками (например, 192.168.1.1). Каждую из этих четырех частей называют октетом.


15) Что такое порт, сколько портов у Linux сервера
	Порт — логический объект, который представляет собой конечную точку связи и связан с процессом или службой в операционной системе.	
	Каждый такой порт уникален и отвечает за ответ пользователю по определенной службе, например, 80 - это http служба, которая отвечает вам при запрашивании страниц сайта, 1433 - это порт службы SQL. 443 - https зашифрованный вариант http, с использованием SSL сертификатов.
	Портов может быть от 1 до 65 535.

16) Уровни OSI
	Сетевая модель стека (магазина) сетевых протоколов OSI/ISO. Посредством данной модели различные сетевые устройства могут взаимодействовать друг с другом. Модель определяет различные уровни взаимодействия систем. Каждый уровень выполняет определённые функции при таком взаимодействии.
	1. Физический (physical):
- Тип данных - Биты (bit). 
- Функции - Работа со средой передачи, сигналами и двоичными данными.
- Примеры - USB, оптоволокно.
	2. Канальный (data link):
- Тип данных - Биты (bit)/Кадры (frame).
- Функции - Физическая адресация.
- Примеры - Ethernet, сетевая карта.
	3. Сетевой (network):
- Тип данных - Пакеты (packet).
- Функции - Определение маршрута и логическая адресация.
- Примеры - IPv4, IPv6, IPsec, AppleTalk, ICMP (маршрутизаторы).
	4. Транспортный (transport):
- Тип данных - Сегменты (segment) /Датаграммы (datagram).
- Функции - Прямая связь между конечными пунктами и надёжность.
- Примеры - TCP, UDP, SCTP, Порты (Хосты (клиенты сети)).
	5. Сеансовый (session)
- Тип данных - Данные.
- Функции - Управление сеансом связи.
- Примеры - RPC, PAP, L2TP, gRPC (Хосты (клиенты сети)).
	6.  Представления (presentation)
- Тип данных - Данные.
- Функции - Представление и шифрование данных
- Примеры - ASCII, EBCDIC, JPEG, MIDI (Хосты (клиенты сети)).
	7. Прикладной (application):
- Тип данных - Данные.
- Функции - Доступ к сетевым службам.
- Примеры - HTTP, FTP, POP3, WebSocket.


17) Хедеры http запросов:
	Это строки в HTTP-сообщении, содержащие разделённую двоеточием пару имя-значение. Заголовки должны отделяться от тела сообщения хотя бы одной пустой строкой.

	Основные заголовки применяется как к запросам, так и к ответам, но не имеет отношения к данным, передаваемым в теле.
	Заголовки запроса содержит больше информации о ресурсе, который нужно получить, или о клиенте, запрашивающем ресурс.
	Заголовки ответа содержат дополнительную информацию об ответе, например его местонахождение, или о сервере, предоставившем его.
	Заголовки сущности содержат информацию о теле ресурса, например его длину содержимого.
